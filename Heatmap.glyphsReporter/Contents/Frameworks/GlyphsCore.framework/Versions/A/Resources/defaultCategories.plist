(
	{
		icon = ATemplate;
		name = Letter;
		predicate = "category == \"Letter\"";
		subGroup = (
			{
				name = Uppercase;
				predicate = "case == 1 AND category == \"Letter\"";
			},
			{
				name = Lowercase;
				predicate = "case == 2 AND category == \"Letter\"";
			},
			{
				name = Ligature;
				predicate = "subCategory == \"Ligature\" AND category == \"Letter\"";
			},
			{
				name = Smallcaps;
				predicate = "case == 3 AND category == \"Letter\"";
			},
			{
				name = Superscript;
				predicate = "subCategory == \"Superscript\" AND category == \"Letter\"";
			}
		);
	},
	{
		icon = FigureTemplate;
		name = Number;
		predicate = "category == \"Number\"";
		subGroup = (
			{
				name = "Decimal Digit";
				list = (
					one,
					two,
					three,
					four,
					five,
					six,
					seven,
					eight,
					nine,
					zero,
				);
			},
			{
				predicate = "name ENDSWITH '.osf'";
				name = "Oldstyle Figures";
				list = (
					"one.osf",
					"two.osf",
					"three.osf",
					"four.osf",
					"five.osf",
					"six.osf",
					"seven.osf",
					"eight.osf",
					"nine.osf",
					"zero.osf",
				);
			},
			{
				predicate = "name ENDSWITH '.lf'";
				name = "Lining Figures";
				list = (
					"one.lf",
					"two.lf",
					"three.lf",
					"four.lf",
					"five.lf",
					"six.lf",
					"seven.lf",
					"eight.lf",
					"nine.lf",
					"zero.lf",
				);
			},
			{
				predicate = "name ENDSWITH '.tf'";
				name = "Tabular Figures";
				list = (
					"one.tf",
					"two.tf",
					"three.tf",
					"four.tf",
					"five.tf",
					"six.tf",
					"seven.tf",
					"eight.tf",
					"nine.tf",
					"zero.tf",
				);
			},
			{
				predicate = "name ENDSWITH '.tosf'";
				name = "Tab Oldstyle Figures";
				list = (
					"one.tosf",
					"two.tosf",
					"three.tosf",
					"four.tosf",
					"five.tosf",
					"six.tosf",
					"seven.tosf",
					"eight.tosf",
					"nine.tosf",
					"zero.tosf",
				);
			},
			{
				predicate = "subCategory == \"Fraction\" AND category == \"Number\"";
				name = Fraction;
				list = (
					"one.numr",
					"two.numr",
					"three.numr",
					"four.numr",
					"five.numr",
					"six.numr",
					"seven.numr",
					"eight.numr",
					"nine.numr",
					"zero.numr",
					"one.dnom",
					"two.dnom",
					"three.dnom",
					"four.dnom",
					"five.dnom",
					"six.dnom",
					"seven.dnom",
					"eight.dnom",
					"nine.dnom",
					"zero.dnom",
					fraction,
					onequarter,
					onehalf,
					threequarters,
					oneeighth,
					threeeighths,
					fiveeighths,
					seveneighths,
				);
			},
			{
				name = "Small Figures";
				predicate = "case == 4 AND category == \"Number\"";
				list = (
					"zerosuperior",
					"onesuperior",
					"twosuperior",
					"threesuperior",
					"foursuperior",
					"fivesuperior",
					"sixsuperior",
					"sevensuperior",
					"eightsuperior",
					"ninesuperior",
					"zeroinferior",
					"oneinferior",
					"twoinferior",
					"threeinferior",
					"fourinferior",
					"fiveinferior",
					"sixinferior",
					"seveninferior",
					"eightinferior",
					"nineinferior",
				);
			},
			{
				name = Other;
				predicate = "subCategory == \"Other\" AND category == \"Number\"";
			}
		);
	},
	{
		icon = SpaceTemplate;
		name = Separator;
		predicate = "category == \"Separator\"";
		subGroup = (
			{
				name = Space;
				predicate = "subCategory == \"Space\" AND category == \"Separator\"";
				list = (
					space,
					nbspace,
					enquad,
					emquad,
					enspace,
					emspace,
					threeperemspace,
					fourperemspace,
					sixperemspace,
					figurespace,
					punctuationspace,
					thinspace,
					hairspace,
					zerowidthspace,
					narrownbspace,
					mediumspace-math,
					space-han,
				);
			},
			{
				name = Other;
				predicate = "subCategory != \"Space\" AND category == \"Separator\"";
				list = (
					zerowidthjoiner,
					zerowidthnonjoiner,
					lefttorightmark,
					righttoleftmark
				);
			},
			// {
			// 	name = Nonspace;
			// 	predicate = "subCategory == \"Nonspacing\" AND category == \"Separator\"";
			// }
		);
	},
	{
		icon = PunctuationTemplate;
		name = Punctuation;
		predicate = "category == \"Punctuation\"";
		subGroup = (
			{
				name = Dash;
				predicate = "subCategory == \"Dash\" AND category == \"Punctuation\"";
				list = (
					hyphen,
					endash,
					emdash,
					underscore,
				);
			},
			{
				name = Parenthesis;
				predicate = "subCategory == \"Parenthesis\" AND category == \"Punctuation\"";
				list = (
					braceleft,
					braceright,
					bracketleft,
					bracketright,
					parenleft,
					parenright,
				);
			},
			{
				name = Quote;
				predicate = "subCategory == \"Quote\" AND category == \"Punctuation\"";
				list = (
					guillemetleft,
					guillemetright,
					guilsinglleft,
					guilsinglright,
					quotedblbase,
					quotedblleft,
					quotedblright,
					quoteleft,
					quoteright,
					quotesinglbase,
					quotedbl,
					quotesingle,
				);
			},
			{
				name = Other;
				predicate = "subCategory != \"Dash\" AND subCategory != \"Parenthesis\" AND subCategory != \"Quote\" AND category == \"Punctuation\" AND NOT name ENDSWITH '.full'";
				list = (
					asterisk,
					backslash,
					bullet,
					colon,
					comma,
					ellipsis,
					exclam,
					exclamdown,
					question,
					questiondown,
					numbersign,
					period,
					periodcentered,
					semicolon,
					slash,
				);
			},
			{
				name = Fullwidth;
				list = (
					comma-han,
					period-han,
					dittomark,
					anglebracketleft,
					anglebracketright,
					dblanglebracketleft,
					dblanglebracketright,
					cornerbracketleft,
					cornerbracketright,
					whitecornerbracketleft,
					whitecornerbracketright,
					blacklenticularbracketleft,
					blacklenticularbracketright,
					tortoiseshellbracketleft,
					tortoiseshellbracketright,
					whitelenticularbracketleft,
					whitelenticularbracketright,
					wavedash,
					exclam.full,
					quotedbl.full,
					numbersign.full,
					percent.full,
					ampersand.full,
					quotesingle.full,
					parenleft.full,
					parenright.full,
					asterisk.full,
					comma.full,
					hyphen.full,
					period.full,
					slash.full,
					colon.full,
					semicolon.full,
					question.full,
					at.full,
					bracketleft.full,
					backslash.full,
					bracketright.full,
					underscore.full,
					braceleft.full,
					braceright.full,
				);
			},
		);
	},
	{
		icon = SymbolTemplate;
		name = Symbol;
		predicate = "category == \"Symbol\"";
		subGroup = (
			{
				name = Currency;
				predicate = "subCategory == \"Currency\" AND category == \"Symbol\"";
				list = (
					euro,
					cent,
					currency,
					dollar,
					sterling,
					yen,
				);
			},
			{
				name = Math;
				predicate = "subCategory == \"Math\" AND category == \"Symbol\"";
				list = (
					approxequal,
					asciicircum,
					asciitilde,
					divide,
					equal,
					greater,
					greaterequal,
					infinity,
					integral,
					less,
					lessequal,
					logicalnot,
					minus,
					multiply,
					notequal,
					partialdiff,
					percent,
					perthousand,
					plus,
					plusminus,
					product,
					radical,
					summation,
				);
			},
			{
				name = Arrow;
				predicate = "subCategory == \"Arrow\" AND category == \"Symbol\"";
				list = (
					leftArrow,
					upArrow,
					rightArrow,
					downArrow,
					leftRightArrow,
					upDownArrow,
					northWestArrow,
					northEastArrow,
					southEastArrow,
					southWestArrow,
				);
			},
			{
				name = Geometry;
				predicate = "subCategory == \"Geometry\" AND category == \"Symbol\"";
				list = (
					lozenge,
					dottedCircle,
				);
			},
			{
				name = Other;
				predicate = "subCategory != \"Currency\" AND subCategory != \"Math\" AND subCategory != \"Arrow\" AND subCategory != \"Geometry\" AND category == \"Symbol\"";
				list = (
					ampersand,
					at,
					bar,
					brokenbar,
					copyright,
					dagger,
					daggerdbl,
					degree,
					paragraph,
					registered,
					section,
					trademark,
				);
			}
		);
	},
	{
		icon = "MarkTemplate.pdf";
		name = Mark;
		predicate = "category == \"Mark\"";
		subGroup = (
			{
				name = Combining;
				predicate = "subCategory == \"Nonspacing\" AND category == \"Mark\"";
				
			},
			{
				name = Modifier;
				predicate = "subCategory == \"Modifier\" AND category == \"Mark\"";
			},
			{
				name = Legacy;
				predicate = "subCategory == \"Spacing\" AND category == \"Mark\"";
				list = (
					acute,
					breve,
					caron,
					cedilla,
					circumflex,
					dieresis,
					dotaccent,
					grave,
					hungarumlaut,
					macron,
					ogonek,
					ring,
					tilde,
				);
			}
		);
	},
	{
		name = Other;
		predicate = "category == nil";
	}
)